(ns find-clusters.core.bak
  (:use funnyplaces.api)               
  (:import [com.javadocmd.simplelatlng LatLng LatLngTool util.LengthUnit]))

(def *assert* true)

(defn cluster? [cluster]
  (when *assert*
    (and (coll? cluster)
         (every? map? cluster))))

(defn cluster-dist-tuple? [tuple]
  (when *assert*
    (and (coll? tuple)
         (cluster? (first tuple))
         (number?  (second tuple)))))

(factual! "ylIucvB3r2oIQ3iBjOES4h1mZcNCZyBmQFcYREdj" "5VTCQYxgp5lwj9r1FEHfSg0rUCnTU1nZLDpwMrJX")

(defn get-distance
  [p1 p2]
  {:pre  [(map? p1)
          (map? p2)]
   :post [(number? %)]}
  (LatLngTool/distance (p1 :LatLng) (p2 :LatLng) LengthUnit/MILE))

(defn add-pois
  "Takes the maximum distance between points, a partially built cluster, and a list
  of next pois that need to be added to the cluster, and returns a vector containing
  all the different clusters that can be generated by adding one of the pois to the
  cluster."
  [max-dist [cluster dist-so-far] next-pois]
  (let [last-poi (last cluster)]
    (filter identity
            (map  #(let [new-dist (+ dist-so-far (get-distance last-poi %))]
                     (when (< new-dist max-dist)
                       [(conj cluster %) new-dist]))
                  next-pois))))

(defn add-pois-to-clusters
  [max-dist clusters next-pois]
  {:pre  [(number? max-dist)
          (coll? clusters)
          (every? cluster-dist-tuple? clusters)
          (coll? next-pois)
          (every? map? next-pois)]
   :post [(every? cluster-dist-tuple? clusters)]}
  (apply concat
         (map #(add-pois max-dist % next-pois)
              clusters)))

(defn add-LatLngs
  [poi-data-entries]
  (map #(assoc % :LatLng (LatLng. (% :latitude) (% :longitude))) poi-data-entries))

(defn get-poi-data-entries-helper
  [area-filters poi]
  {:pre  [(map? area-filters)
          (keyword? poi)]
   :post [(coll? %)
          (every? map? %)]}
  (fetch :places :filters (assoc area-filters :name {:$bw poi}))) ; use :q to search whole entry?

(defn get-poi-data-entries
  [area-filters pois]
  {:pre  [(map? area-filters)
          (coll? pois)
          (every? keyword? pois)]
   :post [(coll? %)
          (every? coll? %)
          (fn [poi-data] (every? #(every? cluster? %) poi-data))]}
  (map #(add-LatLngs (get-poi-data-entries-helper area-filters %)) pois))
                           
(defn find-cluster
  "Example input:
    (find-cluster [:pizza :karaoke :park] 
                  2
                  :country  \"US\"
                  :region   \"CA\"
                  :locality \"Los Angeles\")"
  [pois max-total-dist & {:as area-filters}]
  {:pre  [(coll? pois)
          (every? keyword? pois)
          (number? max-total-dist)
          (map? area-filters)]
   :post [(coll? %)
          (every? cluster-dist-tuple? %)]}
  (let [poi-data (get-poi-data-entries area-filters pois)]
    (loop [clusters   (map #(vector (vector %) 0) (first poi-data))
           poi-data   (next poi-data)]
      (if poi-data
          (recur (add-pois-to-clusters max-total-dist clusters (first poi-data))
                 (next poi-data))
          clusters))))
